// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: audio.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAudio = `-- name: CreateAudio :one
INSERT INTO audio(
  id, 
  created_at,
  updated_at,
  title,
  author,
  duration,
  path,
  user_id,
  size_bytes,
  youtube_video_id,
  thumbnail_path
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING id, title, author, duration, path, created_at, updated_at, user_id, size_bytes, youtube_video_id, thumbnail_path
`

type CreateAudioParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Title          sql.NullString
	Author         sql.NullString
	Duration       sql.NullInt32
	Path           sql.NullString
	UserID         uuid.NullUUID
	SizeBytes      sql.NullInt64
	YoutubeVideoID sql.NullString
	ThumbnailPath  sql.NullString
}

func (q *Queries) CreateAudio(ctx context.Context, arg CreateAudioParams) (Audio, error) {
	row := q.db.QueryRowContext(ctx, createAudio,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Author,
		arg.Duration,
		arg.Path,
		arg.UserID,
		arg.SizeBytes,
		arg.YoutubeVideoID,
		arg.ThumbnailPath,
	)
	var i Audio
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Duration,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SizeBytes,
		&i.YoutubeVideoID,
		&i.ThumbnailPath,
	)
	return i, err
}

const deleteAudioById = `-- name: DeleteAudioById :exec
DELETE FROM audio WHERE id = $1
`

func (q *Queries) DeleteAudioById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAudioById, id)
	return err
}

const getAudioById = `-- name: GetAudioById :one
SELECT id, title, author, duration, path, created_at, updated_at, user_id, size_bytes, youtube_video_id, thumbnail_path FROM audio WHERE id = $1
`

func (q *Queries) GetAudioById(ctx context.Context, id uuid.UUID) (Audio, error) {
	row := q.db.QueryRowContext(ctx, getAudioById, id)
	var i Audio
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Duration,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SizeBytes,
		&i.YoutubeVideoID,
		&i.ThumbnailPath,
	)
	return i, err
}

const getAudiosByUserId = `-- name: GetAudiosByUserId :many
SELECT id, title, author, duration, path, created_at, updated_at, user_id, size_bytes, youtube_video_id, thumbnail_path FROM audio WHERE user_id = $1
`

func (q *Queries) GetAudiosByUserId(ctx context.Context, userID uuid.NullUUID) ([]Audio, error) {
	rows, err := q.db.QueryContext(ctx, getAudiosByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Audio
	for rows.Next() {
		var i Audio
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Duration,
			&i.Path,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.SizeBytes,
			&i.YoutubeVideoID,
			&i.ThumbnailPath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAudioByVideoId = `-- name: GetUserAudioByVideoId :one
SELECT id, title, author, duration, path, created_at, updated_at, user_id, size_bytes, youtube_video_id, thumbnail_path FROM audio WHERE user_id = $1 AND youtube_video_id = $2
`

type GetUserAudioByVideoIdParams struct {
	UserID         uuid.NullUUID
	YoutubeVideoID sql.NullString
}

func (q *Queries) GetUserAudioByVideoId(ctx context.Context, arg GetUserAudioByVideoIdParams) (Audio, error) {
	row := q.db.QueryRowContext(ctx, getUserAudioByVideoId, arg.UserID, arg.YoutubeVideoID)
	var i Audio
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Duration,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SizeBytes,
		&i.YoutubeVideoID,
		&i.ThumbnailPath,
	)
	return i, err
}

const updateAudio = `-- name: UpdateAudio :one
UPDATE audio SET title = $1, author = $2, duration = $3, path = $4, thumbnail_path=$5 WHERE id = $6 RETURNING id, title, author, duration, path, created_at, updated_at, user_id, size_bytes, youtube_video_id, thumbnail_path
`

type UpdateAudioParams struct {
	Title         sql.NullString
	Author        sql.NullString
	Duration      sql.NullInt32
	Path          sql.NullString
	ThumbnailPath sql.NullString
	ID            uuid.UUID
}

func (q *Queries) UpdateAudio(ctx context.Context, arg UpdateAudioParams) (Audio, error) {
	row := q.db.QueryRowContext(ctx, updateAudio,
		arg.Title,
		arg.Author,
		arg.Duration,
		arg.Path,
		arg.ThumbnailPath,
		arg.ID,
	)
	var i Audio
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Duration,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SizeBytes,
		&i.YoutubeVideoID,
		&i.ThumbnailPath,
	)
	return i, err
}
