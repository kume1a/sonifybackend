// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: audio_like.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createAudioLike = `-- name: CreateAudioLike :one
INSERT INTO audio_likes(
  id,
  audio_id, 
  user_id,
  created_at
) VALUES ($1, $2, $3, $4) 
RETURNING id, created_at, user_id, audio_id
`

type CreateAudioLikeParams struct {
	ID        uuid.UUID
	AudioID   uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreateAudioLike(ctx context.Context, arg CreateAudioLikeParams) (AudioLike, error) {
	row := q.db.QueryRowContext(ctx, createAudioLike,
		arg.ID,
		arg.AudioID,
		arg.UserID,
		arg.CreatedAt,
	)
	var i AudioLike
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.AudioID,
	)
	return i, err
}

const deleteAudioLike = `-- name: DeleteAudioLike :exec
DELETE FROM audio_likes 
  WHERE audio_id = $1 AND user_id = $2
`

type DeleteAudioLikeParams struct {
	AudioID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) DeleteAudioLike(ctx context.Context, arg DeleteAudioLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteAudioLike, arg.AudioID, arg.UserID)
	return err
}

const deleteUserAudioLikesByAudioIDs = `-- name: DeleteUserAudioLikesByAudioIDs :exec
DELETE FROM audio_likes WHERE user_id = $1 AND audio_id = ANY($2::uuid[])
`

type DeleteUserAudioLikesByAudioIDsParams struct {
	UserID   uuid.UUID
	AudioIds []uuid.UUID
}

func (q *Queries) DeleteUserAudioLikesByAudioIDs(ctx context.Context, arg DeleteUserAudioLikesByAudioIDsParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserAudioLikesByAudioIDs, arg.UserID, pq.Array(arg.AudioIds))
	return err
}

const getAudioLikes = `-- name: GetAudioLikes :many
SELECT id, created_at, user_id, audio_id 
FROM audio_likes 
WHERE 
  ($1 IS NULL OR user_id = $1) AND 
  ($2 IS NULL OR id = ANY($2::uuid[]))
`

type GetAudioLikesParams struct {
	UserID interface{}
	Ids    interface{}
}

func (q *Queries) GetAudioLikes(ctx context.Context, arg GetAudioLikesParams) ([]AudioLike, error) {
	rows, err := q.db.QueryContext(ctx, getAudioLikes, arg.UserID, arg.Ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AudioLike
	for rows.Next() {
		var i AudioLike
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.AudioID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
