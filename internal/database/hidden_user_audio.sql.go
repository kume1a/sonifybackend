// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hidden_user_audio.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createHiddenUserAudio = `-- name: CreateHiddenUserAudio :one
INSERT INTO hidden_user_audios(
  id,
  audio_id, 
  user_id,
  created_at
) VALUES ($1, $2, $3, $4) 
RETURNING id, created_at, user_id, audio_id
`

type CreateHiddenUserAudioParams struct {
	ID        uuid.UUID
	AudioID   uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreateHiddenUserAudio(ctx context.Context, arg CreateHiddenUserAudioParams) (HiddenUserAudio, error) {
	row := q.db.QueryRowContext(ctx, createHiddenUserAudio,
		arg.ID,
		arg.AudioID,
		arg.UserID,
		arg.CreatedAt,
	)
	var i HiddenUserAudio
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.AudioID,
	)
	return i, err
}

const deleteHiddenUserAudio = `-- name: DeleteHiddenUserAudio :exec
DELETE FROM hidden_user_audios
  WHERE audio_id = $1 AND user_id = $2
`

type DeleteHiddenUserAudioParams struct {
	AudioID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) DeleteHiddenUserAudio(ctx context.Context, arg DeleteHiddenUserAudioParams) error {
	_, err := q.db.ExecContext(ctx, deleteHiddenUserAudio, arg.AudioID, arg.UserID)
	return err
}

const getHiddenUserAudiosByUserID = `-- name: GetHiddenUserAudiosByUserID :many
SELECT id, created_at, user_id, audio_id 
FROM hidden_user_audios
WHERE user_id = $1::uuid
`

func (q *Queries) GetHiddenUserAudiosByUserID(ctx context.Context, userID uuid.UUID) ([]HiddenUserAudio, error) {
	rows, err := q.db.QueryContext(ctx, getHiddenUserAudiosByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HiddenUserAudio
	for rows.Next() {
		var i HiddenUserAudio
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.AudioID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHiddenUserAudiosByUserIDAndAudioIDs = `-- name: GetHiddenUserAudiosByUserIDAndAudioIDs :many
SELECT id, created_at, user_id, audio_id
FROM hidden_user_audios
WHERE user_id = $1::uuid AND 
  audio_id = ANY($2::uuid[])
`

type GetHiddenUserAudiosByUserIDAndAudioIDsParams struct {
	UserID   uuid.UUID
	AudioIds []uuid.UUID
}

func (q *Queries) GetHiddenUserAudiosByUserIDAndAudioIDs(ctx context.Context, arg GetHiddenUserAudiosByUserIDAndAudioIDsParams) ([]HiddenUserAudio, error) {
	rows, err := q.db.QueryContext(ctx, getHiddenUserAudiosByUserIDAndAudioIDs, arg.UserID, pq.Array(arg.AudioIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HiddenUserAudio
	for rows.Next() {
		var i HiddenUserAudio
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.AudioID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
