// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlist.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists(
  id,
  name,
  thumbnail_path
) VALUES ($1,$2,$3) RETURNING id, name, thumbnail_path
`

type CreatePlaylistParams struct {
	ID            uuid.UUID
	Name          string
	ThumbnailPath sql.NullString
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist, arg.ID, arg.Name, arg.ThumbnailPath)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.ThumbnailPath)
	return i, err
}

const getPlaylists = `-- name: GetPlaylists :many
SELECT id, name, thumbnail_path FROM playlists LIMIT $1
`

func (q *Queries) GetPlaylists(ctx context.Context, limit int32) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylists, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(&i.ID, &i.Name, &i.ThumbnailPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
