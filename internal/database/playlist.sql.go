// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists(
  id,
  created_at,
  name,
  thumbnail_path,
  spotify_id,
  thumbnail_url,
  audio_import_status,
  audio_count,
  total_audio_count
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) 
RETURNING id, created_at, name, thumbnail_path, spotify_id, thumbnail_url, audio_import_status, audio_count, total_audio_count
`

type CreatePlaylistParams struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	Name              string
	ThumbnailPath     sql.NullString
	SpotifyID         sql.NullString
	ThumbnailUrl      sql.NullString
	AudioImportStatus ProcessStatus
	AudioCount        int32
	TotalAudioCount   int32
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.ID,
		arg.CreatedAt,
		arg.Name,
		arg.ThumbnailPath,
		arg.SpotifyID,
		arg.ThumbnailUrl,
		arg.AudioImportStatus,
		arg.AudioCount,
		arg.TotalAudioCount,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.ThumbnailPath,
		&i.SpotifyID,
		&i.ThumbnailUrl,
		&i.AudioImportStatus,
		&i.AudioCount,
		&i.TotalAudioCount,
	)
	return i, err
}

const deletePlaylistByID = `-- name: DeletePlaylistByID :exec
DELETE FROM playlists WHERE id = $1
`

func (q *Queries) DeletePlaylistByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistByID, id)
	return err
}

const deletePlaylistsByIDs = `-- name: DeletePlaylistsByIDs :exec
DELETE FROM playlists WHERE id = ANY($1::uuid[])
`

func (q *Queries) DeletePlaylistsByIDs(ctx context.Context, ids []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistsByIDs, pq.Array(ids))
	return err
}

const getPlaylistByID = `-- name: GetPlaylistByID :one
SELECT id, created_at, name, thumbnail_path, spotify_id, thumbnail_url, audio_import_status, audio_count, total_audio_count FROM playlists WHERE id = $1
`

func (q *Queries) GetPlaylistByID(ctx context.Context, id uuid.UUID) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistByID, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.ThumbnailPath,
		&i.SpotifyID,
		&i.ThumbnailUrl,
		&i.AudioImportStatus,
		&i.AudioCount,
		&i.TotalAudioCount,
	)
	return i, err
}

const getPlaylistBySpotifyID = `-- name: GetPlaylistBySpotifyID :one
SELECT id, created_at, name, thumbnail_path, spotify_id, thumbnail_url, audio_import_status, audio_count, total_audio_count FROM playlists WHERE spotify_id = $1::text
`

func (q *Queries) GetPlaylistBySpotifyID(ctx context.Context, spotifyID string) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistBySpotifyID, spotifyID)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.ThumbnailPath,
		&i.SpotifyID,
		&i.ThumbnailUrl,
		&i.AudioImportStatus,
		&i.AudioCount,
		&i.TotalAudioCount,
	)
	return i, err
}

const getPlaylistIDBySpotifyID = `-- name: GetPlaylistIDBySpotifyID :one
SELECT id FROM playlists WHERE spotify_id = $1::text
`

func (q *Queries) GetPlaylistIDBySpotifyID(ctx context.Context, spotifyID string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistIDBySpotifyID, spotifyID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPlaylistsBySpotifyIDs = `-- name: GetPlaylistsBySpotifyIDs :many
SELECT id, created_at, name, thumbnail_path, spotify_id, thumbnail_url, audio_import_status, audio_count, total_audio_count FROM playlists WHERE spotify_id = ANY($1::text[])
`

func (q *Queries) GetPlaylistsBySpotifyIDs(ctx context.Context, spotifyIds []string) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistsBySpotifyIDs, pq.Array(spotifyIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.ThumbnailPath,
			&i.SpotifyID,
			&i.ThumbnailUrl,
			&i.AudioImportStatus,
			&i.AudioCount,
			&i.TotalAudioCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpotifyUserSavedPlaylistIDs = `-- name: GetSpotifyUserSavedPlaylistIDs :many
SELECT playlists.id FROM playlists
  INNER JOIN user_playlists ON playlists.id = user_playlists.playlist_id
  WHERE user_playlists.user_id = $1 
  AND user_playlists.is_spotify_saved_playlist = true
`

func (q *Queries) GetSpotifyUserSavedPlaylistIDs(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getSpotifyUserSavedPlaylistIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylistByID = `-- name: UpdatePlaylistByID :one
UPDATE playlists
SET 
  name = COALESCE($1, name),
  thumbnail_path = COALESCE($2, thumbnail_path),
  spotify_id = COALESCE($3, spotify_id),
  thumbnail_url = COALESCE($4, thumbnail_url),
  audio_import_status = COALESCE($5, audio_import_status),
  audio_count = COALESCE($6, audio_count),
  total_audio_count = COALESCE($7, total_audio_count)
WHERE id = $8
RETURNING id, created_at, name, thumbnail_path, spotify_id, thumbnail_url, audio_import_status, audio_count, total_audio_count
`

type UpdatePlaylistByIDParams struct {
	Name              sql.NullString
	ThumbnailPath     sql.NullString
	SpotifyID         sql.NullString
	ThumbnailUrl      sql.NullString
	AudioImportStatus NullProcessStatus
	AudioCount        sql.NullInt32
	TotalAudioCount   sql.NullInt32
	PlaylistID        uuid.UUID
}

func (q *Queries) UpdatePlaylistByID(ctx context.Context, arg UpdatePlaylistByIDParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylistByID,
		arg.Name,
		arg.ThumbnailPath,
		arg.SpotifyID,
		arg.ThumbnailUrl,
		arg.AudioImportStatus,
		arg.AudioCount,
		arg.TotalAudioCount,
		arg.PlaylistID,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.ThumbnailPath,
		&i.SpotifyID,
		&i.ThumbnailUrl,
		&i.AudioImportStatus,
		&i.AudioCount,
		&i.TotalAudioCount,
	)
	return i, err
}
