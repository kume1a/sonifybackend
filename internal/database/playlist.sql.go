// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlist.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists(
  id,
  created_at,
  name,
  thumbnail_path,
  spotify_id,
  thumbnail_url
) VALUES ($1,$2,$3,$4,$5,$6) 
RETURNING id, name, thumbnail_path, created_at, spotify_id, thumbnail_url
`

type CreatePlaylistParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	Name          string
	ThumbnailPath sql.NullString
	SpotifyID     sql.NullString
	ThumbnailUrl  sql.NullString
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.ID,
		arg.CreatedAt,
		arg.Name,
		arg.ThumbnailPath,
		arg.SpotifyID,
		arg.ThumbnailUrl,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThumbnailPath,
		&i.CreatedAt,
		&i.SpotifyID,
		&i.ThumbnailUrl,
	)
	return i, err
}

const deletePlaylistByID = `-- name: DeletePlaylistByID :exec
DELETE FROM playlists WHERE id = $1
`

func (q *Queries) DeletePlaylistByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistByID, id)
	return err
}

const deletePlaylistsByIDs = `-- name: DeletePlaylistsByIDs :exec
DELETE FROM playlists WHERE id = ANY($1::uuid[])
`

func (q *Queries) DeletePlaylistsByIDs(ctx context.Context, ids []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistsByIDs, pq.Array(ids))
	return err
}

const getPlaylistByID = `-- name: GetPlaylistByID :one
SELECT id, name, thumbnail_path, created_at, spotify_id, thumbnail_url FROM playlists WHERE id = $1
`

func (q *Queries) GetPlaylistByID(ctx context.Context, id uuid.UUID) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistByID, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThumbnailPath,
		&i.CreatedAt,
		&i.SpotifyID,
		&i.ThumbnailUrl,
	)
	return i, err
}

const getPlaylists = `-- name: GetPlaylists :many
SELECT id, name, thumbnail_path, created_at, spotify_id, thumbnail_url FROM playlists 
  WHERE created_at > $1
  ORDER BY created_at DESC
  LIMIT $2
`

type GetPlaylistsParams struct {
	CreatedAt time.Time
	Limit     int32
}

func (q *Queries) GetPlaylists(ctx context.Context, arg GetPlaylistsParams) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylists, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ThumbnailPath,
			&i.CreatedAt,
			&i.SpotifyID,
			&i.ThumbnailUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpotifyUserSavedPlaylistIDs = `-- name: GetSpotifyUserSavedPlaylistIDs :many
SELECT playlists.id FROM playlists
  INNER JOIN user_playlists ON playlists.id = user_playlists.playlist_id
  WHERE user_playlists.user_id = $1 
  AND user_playlists.is_spotify_saved_playlist = true
`

func (q *Queries) GetSpotifyUserSavedPlaylistIDs(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getSpotifyUserSavedPlaylistIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylistByID = `-- name: UpdatePlaylistByID :one
UPDATE playlists
SET name = COALESCE($1, name),
    thumbnail_path = COALESCE($2, thumbnail_path)
WHERE id = $3
RETURNING id, name, thumbnail_path, created_at, spotify_id, thumbnail_url
`

type UpdatePlaylistByIDParams struct {
	Name          string
	ThumbnailPath sql.NullString
	ID            uuid.UUID
}

func (q *Queries) UpdatePlaylistByID(ctx context.Context, arg UpdatePlaylistByIDParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylistByID, arg.Name, arg.ThumbnailPath, arg.ID)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThumbnailPath,
		&i.CreatedAt,
		&i.SpotifyID,
		&i.ThumbnailUrl,
	)
	return i, err
}
