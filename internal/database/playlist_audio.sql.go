// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlist_audio.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPlaylistAudio = `-- name: CreatePlaylistAudio :one
INSERT INTO playlist_audios(
  id,
  playlist_id,
  audio_id,
  created_at
) VALUES ($1,$2,$3,$4) 
RETURNING id, created_at, playlist_id, audio_id
`

type CreatePlaylistAudioParams struct {
	ID         uuid.UUID
	PlaylistID uuid.UUID
	AudioID    uuid.UUID
	CreatedAt  time.Time
}

func (q *Queries) CreatePlaylistAudio(ctx context.Context, arg CreatePlaylistAudioParams) (PlaylistAudio, error) {
	row := q.db.QueryRowContext(ctx, createPlaylistAudio,
		arg.ID,
		arg.PlaylistID,
		arg.AudioID,
		arg.CreatedAt,
	)
	var i PlaylistAudio
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PlaylistID,
		&i.AudioID,
	)
	return i, err
}

const deletePlaylistAudiosByIDs = `-- name: DeletePlaylistAudiosByIDs :exec
DELETE FROM playlist_audios 
  WHERE playlist_id = $1
  AND audio_id = ANY($2::uuid[])
`

type DeletePlaylistAudiosByIDsParams struct {
	PlaylistID uuid.UUID
	AudioIds   []uuid.UUID
}

func (q *Queries) DeletePlaylistAudiosByIDs(ctx context.Context, arg DeletePlaylistAudiosByIDsParams) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistAudiosByIDs, arg.PlaylistID, pq.Array(arg.AudioIds))
	return err
}

const getPlaylistAudioIDsByPlaylistIDs = `-- name: GetPlaylistAudioIDsByPlaylistIDs :many
SELECT id
FROM playlist_audios
WHERE playlist_id = ANY($1::uuid[])
`

func (q *Queries) GetPlaylistAudioIDsByPlaylistIDs(ctx context.Context, playlistIds []uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistAudioIDsByPlaylistIDs, pq.Array(playlistIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistAudioJoinsBySpotifyIDs = `-- name: GetPlaylistAudioJoinsBySpotifyIDs :many
SELECT 
  playlist_audios.id, playlist_audios.created_at, playlist_audios.playlist_id, playlist_audios.audio_id,
  audios.spotify_id AS spotify_id
FROM playlist_audios
INNER JOIN audios ON playlist_audios.audio_id = audios.id
WHERE playlist_audios.playlist_id = $1 AND audios.spotify_id = ANY($2::text[])
`

type GetPlaylistAudioJoinsBySpotifyIDsParams struct {
	PlaylistID uuid.UUID
	SpotifyIds []string
}

type GetPlaylistAudioJoinsBySpotifyIDsRow struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	PlaylistID uuid.UUID
	AudioID    uuid.UUID
	SpotifyID  sql.NullString
}

func (q *Queries) GetPlaylistAudioJoinsBySpotifyIDs(ctx context.Context, arg GetPlaylistAudioJoinsBySpotifyIDsParams) ([]GetPlaylistAudioJoinsBySpotifyIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistAudioJoinsBySpotifyIDs, arg.PlaylistID, pq.Array(arg.SpotifyIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlaylistAudioJoinsBySpotifyIDsRow
	for rows.Next() {
		var i GetPlaylistAudioJoinsBySpotifyIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.PlaylistID,
			&i.AudioID,
			&i.SpotifyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistAudios = `-- name: GetPlaylistAudios :many
SELECT id, created_at, playlist_id, audio_id 
FROM playlist_audios
WHERE ($1::uuid[] IS NULL OR playlist_id = ANY($1::uuid[])) 
  AND ($2::uuid[] IS NULL OR id = ANY($2::uuid[]))
`

type GetPlaylistAudiosParams struct {
	PlaylistIds []uuid.UUID
	Ids         []uuid.UUID
}

func (q *Queries) GetPlaylistAudios(ctx context.Context, arg GetPlaylistAudiosParams) ([]PlaylistAudio, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistAudios, pq.Array(arg.PlaylistIds), pq.Array(arg.Ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaylistAudio
	for rows.Next() {
		var i PlaylistAudio
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.PlaylistID,
			&i.AudioID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistAudiosWithAudioAndAudioLikes = `-- name: GetPlaylistAudiosWithAudioAndAudioLikes :many
SELECT 
  audios.id, audios.created_at, audios.title, audios.author, audios.duration_ms, audios.path, audios.size_bytes, audios.youtube_video_id, audios.thumbnail_path, audios.spotify_id, audios.thumbnail_url, audios.local_id,
  audio_likes.audio_id AS audio_likes_audio_id,
  audio_likes.user_id AS audio_likes_user_id
FROM playlist_audios 
INNER JOIN audios ON playlist_audios.audio_id = audios.id
LEFT JOIN audio_likes ON 
  playlist_audios.audio_id = audio_likes.audio_id 
  AND audio_likes.user_id = $1 
WHERE playlist_audios.playlist_id = $2
`

type GetPlaylistAudiosWithAudioAndAudioLikesParams struct {
	UserID     uuid.UUID
	PlaylistID uuid.UUID
}

type GetPlaylistAudiosWithAudioAndAudioLikesRow struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	Title             sql.NullString
	Author            sql.NullString
	DurationMs        sql.NullInt32
	Path              sql.NullString
	SizeBytes         sql.NullInt64
	YoutubeVideoID    sql.NullString
	ThumbnailPath     sql.NullString
	SpotifyID         sql.NullString
	ThumbnailUrl      sql.NullString
	LocalID           sql.NullString
	AudioLikesAudioID uuid.NullUUID
	AudioLikesUserID  uuid.NullUUID
}

func (q *Queries) GetPlaylistAudiosWithAudioAndAudioLikes(ctx context.Context, arg GetPlaylistAudiosWithAudioAndAudioLikesParams) ([]GetPlaylistAudiosWithAudioAndAudioLikesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistAudiosWithAudioAndAudioLikes, arg.UserID, arg.PlaylistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlaylistAudiosWithAudioAndAudioLikesRow
	for rows.Next() {
		var i GetPlaylistAudiosWithAudioAndAudioLikesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Author,
			&i.DurationMs,
			&i.Path,
			&i.SizeBytes,
			&i.YoutubeVideoID,
			&i.ThumbnailPath,
			&i.SpotifyID,
			&i.ThumbnailUrl,
			&i.LocalID,
			&i.AudioLikesAudioID,
			&i.AudioLikesUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
