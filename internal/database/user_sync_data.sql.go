// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_sync_data.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserSyncData = `-- name: CreateUserSyncData :one
INSERT INTO user_sync_data (
  id,
  user_id, 
  spotify_last_synced_at
) VALUES ($1,$2,$3)
RETURNING id, user_id, spotify_last_synced_at
`

type CreateUserSyncDataParams struct {
	ID                  uuid.UUID
	UserID              uuid.UUID
	SpotifyLastSyncedAt time.Time
}

func (q *Queries) CreateUserSyncData(ctx context.Context, arg CreateUserSyncDataParams) (UserSyncDatum, error) {
	row := q.db.QueryRowContext(ctx, createUserSyncData, arg.ID, arg.UserID, arg.SpotifyLastSyncedAt)
	var i UserSyncDatum
	err := row.Scan(&i.ID, &i.UserID, &i.SpotifyLastSyncedAt)
	return i, err
}

const getUserSyncDatumByUserId = `-- name: GetUserSyncDatumByUserId :one
SELECT id, user_id, spotify_last_synced_at FROM user_sync_data WHERE user_id = $1
`

func (q *Queries) GetUserSyncDatumByUserId(ctx context.Context, userID uuid.UUID) (UserSyncDatum, error) {
	row := q.db.QueryRowContext(ctx, getUserSyncDatumByUserId, userID)
	var i UserSyncDatum
	err := row.Scan(&i.ID, &i.UserID, &i.SpotifyLastSyncedAt)
	return i, err
}

const updateUserSyncDatumByUserId = `-- name: UpdateUserSyncDatumByUserId :one
UPDATE user_sync_data
  SET spotify_last_synced_at = COALESCE($1, spotify_last_synced_at)
  WHERE id = $2
  RETURNING id, user_id, spotify_last_synced_at
`

type UpdateUserSyncDatumByUserIdParams struct {
	SpotifyLastSyncedAt time.Time
	ID                  uuid.UUID
}

func (q *Queries) UpdateUserSyncDatumByUserId(ctx context.Context, arg UpdateUserSyncDatumByUserIdParams) (UserSyncDatum, error) {
	row := q.db.QueryRowContext(ctx, updateUserSyncDatumByUserId, arg.SpotifyLastSyncedAt, arg.ID)
	var i UserSyncDatum
	err := row.Scan(&i.ID, &i.UserID, &i.SpotifyLastSyncedAt)
	return i, err
}
